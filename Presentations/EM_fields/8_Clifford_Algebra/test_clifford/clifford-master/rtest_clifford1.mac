/*******************************
Clifford algebra
a lightweight package for performing Geometric Algebra calculations

tests for version
 v 2.0
 
usage:
file_search_maxima: append (file_search_maxima,["/path/to/clifford.mac"]);
batch("rtest_clifford", test);

@depends clifford.mac

**********************************
 * @license This library is free software; you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation; either
 *      version 2.1 of the License, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *       Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library; if not, write to the Free Software
 *      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 (kill(all),
 /*
  %path:read("Path to package"),
  %path:append ([%path,"$$$.{mac,mc}"]),
  */
  %path:"C:/Dropbox/maxima/$$$.{mac,mc}",
  file_search_maxima:append (file_search_maxima , [%path]),
  %start : absolute_real_time(),
  load("clifford"),
  'done);
'done$
get('clifford,'version);
v20$
/* init clifford" 
(clifford(e,1,1,1),
aform);
matrix([1,0,0],[0,-1,0],[0,0,0])$*/
(clifford(e,1,1,1),
elements());
[e[1],e[2],e[3],e[1] . e[2],e[1] . e[3],e[2] . e[3],e[1] . e[2] . e[3]]$
/* clifford product tests" */
e[1].e[1];
1$
e[2].e[2];
-1$
e[3].e[3];
0$
e[2].e[1];
-e[1] . e[2]$
e[1] | e[1] | e[1];
e[1]$
e[1] | e[1] | e[1] | e[1];
1$
e[1] | e[2];
0$
e[1] | e[1];
1$
e[1] | e[2];
0$
e[2] | e[2];
-1$
e[3] | e[3];
0$
/* outer product tests 
*/
e[3] & e[3];
0$
e[1] & e[1];
0$ 
(e[1] & e[2]) & e[3];
e[1] . e[2] . e[3]$
/* mixed product tests 
*/
(e[1] & e[2]) | e[3];
0$
/* explicit simplificaton tests*/
dotsimpc(e[2] . e[1] . e[2]);
e[1]$
e[1].e[2].e[1];
-e[2]$
e[1].e[1].e[2];
e[2]$
e[1].e[1].e[2].e[1];
-e[1] . e[2]$
e[1].e[1].e[2].e[1].e[2];
e[1]$
e[1].e[1].e[1].e[2].e[1];
-e[2]$
/* Jacobi identity 
aa & bb  & cc+ cc & aa & bb +bb & cc& aa;
0$*/
e[1] & e[2]  & e[3]+  e[3]& e[2] & e[1] +e[2] & e[3] & e[1];
e[1] . e[2] . e[3]$
(e[1].e[2])& (e[2].e[3])& (e[1].e[3])+(e[1].e[3])& (e[2].e[3])& (e[1].e[2])+(e[2].e[3])& (e[1].e[3])& (e[1].e[2]), dotsimpc;
0$
/* complex tests*/
block(
	declare([a,b,c,d],scalar),
	cc:a+b*e[1]+c*e[2]+d*e[1].e[2],
	dd:cinv(cc),
	expand(dd)
);
a/(a^2-b^2+c^2-d^2)-(e[1]*b)/(a^2-b^2+c^2-d^2)-(e[2]*c)/(a^2-b^2+c^2-d^2)-((e[1] . e[2])*d)/(a^2-b^2+c^2-d^2)$
dd.cc, expand, ratsimp, cliffsimpall;
1$
grade(cc);
[a,e[1]*b+e[2]*c,(e[1] . e[2])*d, 0]$
(grade(dd)-
[a/(a^2-b^2+c^2-d^2),- (e[1]*b/(a^2-b^2+c^2-d^2))- e[2]*c/(a^2-b^2+c^2-d^2),- (e[1] . e[2]*d)/(a^2-b^2+c^2-d^2),0]),ratsimp;
[0,0,0,0]$
block(
	a1:cvect(a),
	b1:cvect(b),
	c1:cvect(c),
	dd:(a1 & b1 )& c1 - a1 & (b1 & c1),
	factor(expand(dd))
);
0$
grade(e[1] . e[2]/5);
[0,0,e[1] . e[2]/5,0]$
