/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: input   start ] */
kill(all);

print("Introduce functional dependence")$
depends([a11,a12,a21,a22],[x,y,z]);

/* specific values */
/* in this case we are considering a vector function A */
print("This is the vector function considered")$
Ax : 3*x^2;
Ay : 2 * z;
Az : x^2 * z;

a11 : Az$
a12:  Ax - %i * Ay$
a21:  Ax + %i * Ay$
a22:  -Az$

print("Pauli matrix corresponding to vector A")$
Ap : matrix([a11,a12],[a21,a22]); 

/*_________________________________________________*/
/* This part is the function that compute the nabla
of a Pauli matrix in rectangular coordinates */

Nablarect(Ap) := 
block([],

print("Nabla is"),

NAp11 : diff(Ap[1,1],z)+diff(Ap[2,1],x)-%i*diff(Ap[2,1],y),
NAp12 : diff(Ap[1,2],z)+diff(Ap[2,2],x)-%i*diff(Ap[2,2],y),
NAp21 :-diff(Ap[2,1],z)+diff(Ap[1,1],x)+%i*diff(Ap[1,1],y),
NAp22 :-diff(Ap[2,2],z)+diff(Ap[1,2],x)+%i*diff(Ap[1,2],y),

NAp11 : factor(NAp11),
NAp12 : factor(NAp12),
NAp21 : factor(NAp21),
NAp22 : factor(NAp22),

NAp : (matrix([NAp11, NAp12],[NAp21, NAp22]))
)$
/*_________________________________________________*/

NA  : Nablarect(Ap);
 
print("The divergence is")$
divA : 1/2*(NA[1,1]+NA[2,2]);

NAx : ratsimp(1/2*(NA[2,1]+NA[1,2]))$
NAy : ratsimp(1/2*(NA[2,1]-NA[1,2])/%i)$
NAz : ratsimp(1/2*(NA[1,1]-NA[2,2]))$

print('NAx," = ",NAx)$
print('NAy," = ",NAy)$
print('NAz," = ",NAz)$

print("Conventional analysis")$
load(vect)$
scalefactors(cartesian3d);

Avect :[Ax,Ay,Az];

print("Divergence")$
d : div (Avect); 
express (d);
divAc :ev (%, diff)$
print("Divergence ",divAc)$

print("Curl")$
curl (Avect);
express (%);
curlA : ev (%, diff);

print("verification")$
curlA[1]-NAx/%i;
curlA[2]-NAy/%i;
curlA[3]-NAz/%i;

print("end")$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
