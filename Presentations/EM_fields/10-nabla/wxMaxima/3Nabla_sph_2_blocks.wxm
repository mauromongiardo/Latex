/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: input   start ] */
kill(all)$

print("introducing the dependencies")$
depends([a11,a12,a21,a22],[r,%theta,phi]);
Ap : matrix([a11,a12],[a21,a22]); 

/*_________________________________________________________________*/
/* This block computes the nabla operator in spherical coordinates */
/*_________________________________________________________________*/
Nablasph(Ap) := 
block([],

print("Nabla is"),

n11ap11 : cos(%theta)*diff(Ap[1,1],r)-
            sin(%theta)/r * diff(Ap[1,1],%theta),
n12ap21 : sin(%theta)*diff(Ap[2,1],r) 
            + cos(%theta)/r * diff(Ap[2,1],%theta) -
            %i/(r*sin(%theta))*diff(Ap[2,1],phi),
n12ap21 : n12ap21 * %e^(-%i*phi),
NEp11 : ratsimp(n11ap11 + n12ap21),
NEp11 : trigsimp(NEp11),

n21ap11 : sin(%theta)*diff(Ap[1,1],r) 
            + cos(%theta)/r * diff(Ap[1,1],%theta) +
            %i/(r*sin(%theta))*diff(Ap[1,1],phi),
n21ap11 : n21ap11 * %e^(%i*phi),
n22ap21 : -cos(%theta)*diff(Ap[2,1],r)
            +sin(%theta)/r * diff(Ap[2,1],%theta),
NEp21 : ratsimp(n21ap11 + n22ap21),
NEp21 : trigsimp(NEp21),

n11ap12 : cos(%theta)*diff(Ap[1,2],r)
            -sin(%theta)/r * diff(Ap[1,2],%theta),
n12ap22 : sin(%theta)*diff(Ap[2,2],r) 
            + cos(%theta)/r * diff(Ap[2,2],%theta) -
            %i/(r*sin(%theta))*diff(Ap[2,2],phi),
n12ap22 : n12ap22 * %e^(-%i*phi),
NEp12 : ratsimp(n11ap12 + n12ap22),
NEp12 : trigsimp(NEp12),


n21ap12 : sin(%theta)*diff(Ap[1,2],r) 
            + cos(%theta)/r * diff(Ap[1,2],%theta) +
            %i/(r*sin(%theta))*diff(Ap[1,2],phi),
n21ap12 : n21ap12 * %e^(%i*phi),
n22ap22 : -cos(%theta)*diff(Ap[2,2],r)
            +sin(%theta)/r * diff(Ap[2,2],%theta),
NEp22 : ratsimp(n21ap12 + n22ap22),
NEp22 : trigsimp(NEp22),

NEp : expand((matrix([NEp11, NEp12],[NEp21, NEp22]))),
NEp : factor(trigsimp(NEp))
)$
/*_________________________________________________________________*/
/* Block end */
/*_________________________________________________________________*/

print("_________________________________________________________")$
print("Pauli Matrices Definition")$
print("_________________________________________________________")$

%sigma[0] : matrix([1,0],[0,1])$
%sigma[1] : matrix([0,1],[1,0])$
%sigma[2] : matrix([0,-%i],[%i,0])$
%sigma[3] : matrix([1,0],[0,-1])$

print('%sigma[0]," = ",%sigma[0])$
print('%sigma[1]," = ",%sigma[1])$
print('%sigma[2]," = ",%sigma[2])$
print('%sigma[3]," = ",%sigma[3])$

print("_________________________________________________________")$
print("Pauli Matrices Definition Spherical")$
print("_________________________________________________________")$

ct : cos(%theta)$
st : sin(%theta)$

%sigma[r] : matrix([ct,st * %e^(-%i * phi)],[st * %e^(%i * phi),-ct])$
%sigma[%theta] : matrix([-st,ct  * %e^(-%i * phi)],[ct * %e^(%i * phi),st])$
%sigma[phi] : matrix([0,-%i * %e^(-%i * phi)],[%i * %e^(%i * phi),0])$

print('%sigma[r]," = ",%sigma[r])$
print('%sigma[%theta]," = ",%sigma[%theta])$
print('%sigma[phi]," = ",%sigma[phi])$

depends([Ar,Atheta,Aphi],[r,%theta,phi])$
print("_________________________________________________________")$
print("vector A in spherical coordinates")$
print("_________________________________________________________")$
Asph : trigsimp(factor(Ar*%sigma[r]+Atheta*%sigma[%theta]+Aphi*%sigma[phi]));

Ap : Asph$

print("_________________________________________________________")$
print("Performing Nabla A")$
NA  : Nablasph(Ap); 


print("_________________________________________________________")$
/*_________________________________________________________________*/
/* This block computes the grades in spherical coordinates */
/*_________________________________________________________________*/
Gradesph(M) := 
block([],

/* print("Divergence"),*/
DivA : expand(1/2 * (M[1,1]+M[2,2])),

/* print("Dot Multiplication with %sigma[r] and taking the trace")$ */
Asph_sr : (M . %sigma[r]),
Asr : expand(1/2 * (Asph_sr[1,1]+Asph_sr[2,2])),
Asr : trigsimp(Asr),
Asr : expand(Asr),
/* print('Asr," = ",Asr), */

/* print("Dot Multiplication with %sigma[%theta] and taking the trace")$ */
Asph_st : (M . %sigma[%theta]),
Ast : 1/2 * (Asph_st[1,1]+Asph_st[2,2]),
Ast : trigsimp(expand(Ast)),
Ast : expand(Ast),
/* print('Ast," = ",Ast), */

/* print("Dot Multiplication with %sigma[phi] and taking the trace")$ */
Asph_sp : (M . %sigma[phi]),
Asp : 1/2 * (Asph_sp[1,1]+Asph_sp[2,2]),
Asp : trigsimp(expand(Asp)),
Asp : expand(Asp),
/* print('Asp," = ",Asp), */

print("_________________________________________________________"),
print("Grade structure"),
print("Grade 0"),
a0 : realpart(DivA),
print('a0," = ",a0),
print("Grade 1"),
ar : realpart(Asr),
at : realpart(Ast),
ap : realpart(Asp),
print('ar," = ",ar),
print('at," = ",at),
print('ap," = ",ap),
print("Grade 2"),
Bar : imagpart(Asr),
Bat : imagpart(Ast),
Bap : imagpart(Asp),
print('Bar," = ",Bar),
print('Bat," = ",Bat),
print('Bap," = ",Bap),
print("Grade 3"),
t0 : imagpart(DivA),
print('t0," = ",t0)
)$
/*_________________________________________________________________*/
/* Block end */
/*_________________________________________________________________*/


print("_________________________________________________________")$
M : NA$
print("Extracting the Grades")$
Gradesph(M)$

print("_________________________________________________________")$
print(" ATTENTION : SECOND ORDER OPERATORS")$
print("_________________________________________________________")$
print("Performing Nabla Nabla A")$
NNA  : Nablasph(NA); 

print("_________________________________________________________")$
print("Extracting the Grades")$
M : NNA$
Gradesph(M)$


print("end")$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
