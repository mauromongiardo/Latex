/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: input   start ] */
kill(all)$
load(vect);
/* code name: Pauli_bca.wxm */

declare([a1,a2,a3],scalar)$
declare([b1,b2,b3],scalar)$
declare([c1,c2,c3],scalar)$

print("_________________________________________________________")$
print("Pauli Matrices Definition")$
print("_________________________________________________________")$

%sigma[0] : matrix([1,0],[0,1])$
%sigma[1] : matrix([0,1],[1,0])$
%sigma[2] : matrix([0,-%i],[%i,0])$
%sigma[3] : matrix([1,0],[0,-1])$

/*
print('%sigma[0]," = ",%sigma[0])$
print('%sigma[1]," = ",%sigma[1])$
print('%sigma[2]," = ",%sigma[2])$
print('%sigma[3]," = ",%sigma[3])$
*/

a : a1 . %sigma[1] + a2 . %sigma[2] + a3 . %sigma[3]$
print("Express vector ",'a," as a Pauli matrix ",a)$
b : b1 . %sigma[1] + b2 . %sigma[2] + b3 . %sigma[3]$
print("Express vector ",'b," as a Pauli matrix ",b)$
c : c1 . %sigma[1] + c2 . %sigma[2] + c3 . %sigma[3]$
print("Express vector ",'c," as a Pauli matrix ",c)$

print("_________________________________________________________")$
print("geometric (Clifford) product bc (between two vectors)    ")$
print("_________________________________________________________")$

print("Find their product")$
bc : ratsimp(b . c);

print("The  scalar part (inner product) is the trace/2")$
sbc : ratsimp((bc[1,1]+bc[2,2])/2);

print("The external product ",'b ,"^", 'c)$
bwc : ratsimp(bc - sbc . %sigma[0]);
print("one recognizes that the above is %i b x c")$
print("_________________________________________________________")$
print(" The following identity holds b ^ c = %i b x c  ")$
print("_________________________________________________________")$
print("Now perform  (b ^ c) a")$
print("_________________________________________________________")$
abwc :  bwc . a ;

print("The  scalar part (inner product) is the trace/2")$
sbc : factor(ratsimp((abwc[1,1]+abwc[2,2])/2));
print("Note that the above is a trivector (a pseudoscalar)")$
print("It corresponds to the volume element  b ^ c ^ a")$

print("If we consider the matrix ")$
abc : matrix([a1,a2,a3],[b1,b2,b3],[c1,c2,c3])$
print('abc," = ",abc)$
print("its determinat is ")$
dabc : determinant(abc);
print("and the determinant multiplied by i is")$
print("equal to  the scalar part, their difference being")$
ratsimp(%i * dabc - sbc);

print("_________________________________________________________")$
print("Therefore we have  b ^ c ^ a = i det(abc)")$
print("_________________________________________________________")$

print("The remaining part corresponds to  (b ^ c) dot a")$
awbwc : ratsimp(abwc - sbc . %sigma[0]);

print("i.e. a vector with components")$
ws : ratsimp((awbwc[1,1]+awbwc[2,2])/2)$
wx : ratsimp((awbwc[2,1]+awbwc[1,2])/2)$
wy : ratsimp((awbwc[2,1]-awbwc[1,2])/(2*%i))$
wz : ratsimp((awbwc[1,1]-awbwc[2,2])/2)$

print('ws, " = ",ws )$
print('wx, " = ",wx )$
print('wy, " = ",wy )$
print('wz, " = ",wz )$


print("_________________________________________________________")$
print(" (a.b)c - (a.c)b  (identity bac- cab = a x b c )  ")$
print("_________________________________________________________")$

print("trying a different approach")$
print("evaluating dot products e.g. a dot b as (ab + ba)/2")$
adb : ratsimp((a . b + b . a)/2);
adc : ratsimp((a . c + c . a)/2);
w : adb . c - adc . b;

as : ratsimp((w[1,1]+w[2,2])/2)$
ax : ratsimp((w[2,1]+w[1,2])/2)$
ay : ratsimp((w[2,1]-w[1,2])/(2*%i))$
az : ratsimp((w[1,1]-w[2,2])/2)$

print("i.e. a vector with components")$
print('as, " = ",as )$
print('ax, " = ",ax )$
print('ay, " = ",ay )$
print('az, " = ",az )$

print("Proof that their sum (e.g. wx + ax) vanishes")$
ratsimp(wx+ax);
ratsimp(wy+ay);
ratsimp(wz+az);


print("_________________________________________________________")$
print("Therefore w = a . (b ^ c) = (a.b)c - (a.c)b = -(b ^ c) . a")$
print("The dot product of a vector with a bivector is anticommutative")$
print("_________________________________________________________")$

/*
print("======================GIBBS=======================")$
a:[a1, a2, a3]; 
b:[b1, b2, b3];
c:[c1, c2, c3]; 

print("A X ( B X C ) = ")$
r1 : express(a ~ express(b ~ c));

print("The sum of these coefficients with")$
print("those previously found gives zero ")$
ratsimp(r1[1] + ax);
ratsimp(r1[2] + ay);
ratsimp(r1[3] + az);

print("_________________________________________________________")$
print("Therefore a . (b ^ c) = (a.b)c - (a.c)b = - a x b x c  ")$
print("_________________________________________________________")$
*/
print("end")$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
